#ifndef __GDISPLAY_HPP
#define __GDISPLAY_HPP

#include "builtin.hpp"
#include "timer.hpp"

typedef struct _GtkWindow          GtkWindow;
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkBox GtkBox;
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkBox GtkBox;
typedef struct _GdkDrawable GdkPixmap;

using namespace __shedskin__;
namespace __gmonitor__ {
class Controls;
};

namespace __vic_ii__ {
class VIC_II;
}

namespace __gdisplay__ {

extern str *const_0, *const_1;


class TextView;


extern str *__name__;


typedef enum {
  NORMAL_TEXT,
} mode_t;

extern class_ *cl_TextView;
class TextView : public object {
public:
    __vic_ii__::VIC_II *VIC;
    __ss_int VIC_bank;
    __ss_int old_VIC_bank;
    __ss_int character_bitmaps_offset;
    __ss_int video_offset;
    __ss_int border_color;
    __gmonitor__::Controls *controls;
    __ss_int background_color_0;
    mode_t mode;
    __ss_int viewport_column;
    __ss_int last_row;
    __ss_int first_row;
    __ss_int viewport_row;
    __ss_int last_column;
    __ss_int first_column;
    std::vector<GdkBitmap*> characters;
    GdkColor colors[16];
    GtkWindow* window;
    GtkEventBox* event_box;
    GtkBox* box;
    GtkDrawingArea* drawing_area;
    GdkPixmap* pixmap;

    TextView() {}
    TextView(__vic_ii__::VIC_II *VIC, __gmonitor__::Controls *controls) {
        this->__class__ = cl_TextView;
        __init__(VIC, controls);
    }
    void *repaint();
    void *unprepare();
    void *__init__(__vic_ii__::VIC_II *VIC, __gmonitor__::Controls *controls);
    
    void allocate_pixmap();
    GdkBitmap* get_pixmap_mask(unsigned char* char_data_1, size_t size, bool B_invert);
    void prepare_characters();
    void repaint_pixmap();
    void set_border_color(unsigned value);
    //border_color = property(lambda self: self._border_color, set_border_color)
};

void __init();

} // module namespace
#endif
