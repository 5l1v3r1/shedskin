
# (c) Jack Ha
# --- jack.ha@gmail.com

# code

def row_fit(numbers, startnum, length):  # i: [int], startnum: [int]*, length: [int], s: [int], numbers: [list(int)]
#    print 'row_fit'                      # [str]
    s = 0                                # [int]
    for i in range(startnum, len(numbers)): # [int]
        s += numbers[i]                  # [int]
    if s+len(numbers)-startnum-1 <= length: # [int]
        #print 't16'                      # [str]
        return True                      # [int]
    else:
        return False                     # [int]

def possible_row(new_row, old_row, startold): # i: [int], old_row: [list(str)], startold: [int], new_row: [list(str)]
    #print 'possible_row'                 # [str]
    for i in range(len(new_row)):        # [int]
        if old_row[startold+i] <> 'u':   # [int]
            #print 't14'                  # [str]
            if (new_row[i] <> 'u') and (old_row[startold+i] <> new_row[i]): # [int]
                #print 't15'              # [str]
                return False             # [int]
    return True                          # [int]

def row_perm_rec(numbers, startnum, length, old_row, startold): # pos: [int]*, all_empty: [int], numbers: [list(int)], old_row: [list(str)], all_full: [int], hoppa_row: [str, list(str)]r, startnum: [int]*, new_row: [list(str)]r, a: [str, list(str)], i: [int], length: [int]*, startold: [int], x: [int]
    #print 'row_perm_rec', numbers, startnum, length # [str], [list(int)], [int], [int]
    if len(numbers) == startnum:         # [int]
        new_row = []                     # [list(str)]
        for i in range(length):          # [int]
            new_row.append('.')          # [None]
        #print 'ret'                      # [str]
        return new_row                   # [list(str)]
    else:
        #print 't1'                       # [str]
        hoppa_row = 'impossible'         # [str]
        if row_fit(numbers, startnum, length): # [int]
            #print 't2'                   # [str]
            hoppa_row = []               # [list(str)]
            for pos in range(length-numbers[startnum]+1): # [int]
                all_empty = True         # [int]
                for i in range(pos):     # [int]
                    if old_row[startold+i] <> '.' and old_row[startold+i] <> 'u': # [int]
                        #print 't3'       # [str]
                        all_empty = False # [int]
                all_full = True          # [int]
                for i in range(numbers[startnum]): # [int]
                    if old_row[startold+pos+i] <> 'X' and old_row[startold+pos+i] <> 'u': # [int]
                        #print 't4'       # [str]
                        all_full = False # [int]
                if all_empty and all_full: # [int]
                    #print 't5'           # [str]
                    new_row = []         # [list(str)]
                    x = 0                # [int]
                    for i in range(pos): # [int]
                        new_row.append('.') # [None]
                    for i in range(numbers[startnum]): # [int]
                        new_row.append('X') # [None]
                    if pos+numbers[startnum] < length: # [int]
                        new_row.append('.') # [None]
                        x = 1            # [int]

                    a = row_perm_rec(numbers, startnum+1, length-numbers[startnum]-pos-x, old_row, startold+numbers[startnum]+pos+x) # [str, list(str)]
#                    #print 'test0'
                    if a <> 'impossible' or a == []: # [int]
                        #print 't6'       # [str]
                        if a == []:      # [int]
                            #print 't7'   # [str]
                            if length-numbers[startnum]-pos-x <> 0: # [int]
                                #print 't8' # [str]
                                a = 'impossible' # [str]
                        if a <> 'impossible': # [int]
                            #print 't9'   # [str]
                            new_row.extend(a) # [str, list(str)]
                            if possible_row(new_row, old_row, startold): # [int]
                                #print 't10' # [str]
                                if hoppa_row == []: # [int]
                                    #print 't11' # [str]
                                    hoppa_row = new_row[:] # [str, list(str)]
                                for i in range(length): # [int]
                                    if (hoppa_row[i] <> 'u'): # [int]
                                        #print 't12' # [str]
                                        if (hoppa_row[i] <> new_row[i]): # [int]
                                            #print 't13' # [str]
                                            hoppa_row[i] = 'u' # [str]
        return hoppa_row                 # [str, list(str)]

def solve_row(numbers, length, old_row = []): # i: [int], numberscopy: [list(int)], old_row: [list(str)], length: [int]*, numbers: [list(int)], row: [str, list(str)]r
    #print 'solve_row'                    # [str]
    if old_row == []:                    # [int]
        for i in range(length):          # [int]
            old_row.append('u')          # [None]
    numberscopy = numbers[:]             # [list(int)]
    #print 'before'                       # [str]
    row = row_perm_rec(numberscopy, 0, length, old_row, 0) # [str, list(str)]
    #print 'after'                        # [str]
    if row <> 'impossible':              # [int]
        if row == []:                    # [int]
            for i in range(length):      # [int]
                row.append('u')          # [None]
        # following not used
        #new_row = []                     # [list(str)]
        #for i in range(length):          # [int]
        #    if (old_row[i] == 'u') or (old_row[i] == row[i]): # [int]
        #        new_row.append(row[i])   # [None]
        #    else:
        #        new_row.append('u')      # [None]
    return row                           # [str, list(str)]

def print_puzzle(puzzle, puzzleboard):   # puzzle: [list(list(list(int)))], y: [int], x: [int], puzzleboard: [list(list(str))]
    for y in range(len(puzzle[1])):      # [int]
        for x in range(len(puzzle[0])):  # [int]
            print puzzleboard[y][x],     # [str]
        print

def check_puzzle(puzzlecolumns, puzzlerows): # puzzlecolumns: [list(list(int))], puzzlerows: [list(list(int))], i: [list(int)], sum1: [int], sum2: [int]
    sum1 = 0                             # [int]
    for i in puzzlecolumns:              # [list(int)]
        sum1 += sum(i)                   # [int]
    sum2 = 0                             # [int]
    for i in puzzlerows:                 # [list(int)]
        sum2 += sum(i)                   # [int]

#    print "Sum:", sum1, sum2, "Area:", len(puzzlecolumns)*len(puzzlerows), "Ratio:", float(sum2)/float(len(puzzlecolumns)*len(puzzlerows)) # [str], [int], [int], [str], [int], [str], [float]
    return sum1 == sum2                  # [int]

def create_empty(x,y):                   # a: [list(list(str))]r, i: [int], j: [int], y: [int]*, x: [int]*
    r = []                               # [list(str)]
    a = []                               # [list(list(str))]
    for i in range(x):                   # [int]
        r.append('u')                    # [None]
    for j in range(y):                   # [int]
        a.append(r[:])                   # [None]
    return a                             # [list(list(str))]

def solve_puzzle(puzzlecolumns, puzzlerows): # changed: [int], rounds: [int], puzzlerows: [list(list(int))], newcol: [str, list(str)], sizeX: [int]*, sizeY: [int]*, puzzlecolumns: [list(list(int))], s: [str, list(str)], y: [int], x: [int], col: [list(str)], puzzleboard: [list(list(str))]
    sizeX = len(puzzlecolumns)           # [int]
    sizeY = len(puzzlerows)              # [int]
#    print 'X size:', sizeX, 'Y size:', sizeY # [str], [int], [str], [int]
    puzzleboard = create_empty(sizeX, sizeY) # [list(list(str))]
    #print_puzzle([puzzlecolumns,puzzlerows], puzzleboard) # []
    changed = True                       # [int]
    rounds = 0                           # [int]
    while changed:                       # [int]
        changed = False                  # [int]
        for y in range(sizeY):           # [int]
#            print '- ',                  # [str]
            s = solve_row(puzzlerows[y], sizeX, puzzleboard[y])[:] # [str, list(str)]
            for x in range(sizeX):       # [int]
                if puzzleboard[y][x] <> s[x]: changed = True # [int]
                puzzleboard[y][x] = s[x] # [str]
        #print
        #print "Rounds:", rounds          # [str], [int]
        #print_puzzle([puzzlecolumns,puzzlerows], puzzleboard) # []
        for x in range(sizeX):           # [int]
#            print '|',                   # [str]
            col = []                     # [list(str)]
            for y in range(sizeY):       # [int]
                col.append(puzzleboard[y][x]) # [None]
            newcol = solve_row(puzzlecolumns[x], sizeY, col) # [str, list(str)]
            for y in range(sizeY):       # [int]
                if puzzleboard[y][x] <> newcol[y]: changed = True # [int]
                puzzleboard[y][x] = newcol[y] # [str]
        rounds += 1                      # [int]
        #print
        #print_puzzle([puzzlecolumns,puzzlerows], puzzleboard) # []
        #print "Rounds:", rounds          # [str], [int]
    print 'Rounds:', rounds
    return                               # [None]


def bert():                              # puzzlecolumns: [list(list(int))], puzzlerows: [list(list(int))]
    puzzlecolumns = [[6],[8,3],[10,5],[10,6],[16,3],[10,3,2],[8,1,2],[6,5,2,1,2],[4,2,3,1,2,2],[3,1,4,1,1,1],[3,1,4,2,1],[5,5,2,3,1],[6,3,3,1],[5,5,2,3,1],[4,1,3,2,1],[2,1,4,1,1,1],[4,2,4,1,2,2],[6,5,2,1,2],[9,1,2],[10,3,2],[17,3],[11,6],[11,5],[9,3],[7]] # [list(list(int))]

    puzzlerows = [[5],[6,7],[8,9],[10,4,9],[25],[25],[8,5,8],[7,3,7],[7,3,1,3,7],[5,2,1,1,2,5],[4,1,1,1,1,3],[1,1,3,1,3,1],[1,5,5,1],[2,5,5,2],[2,3,1,3,2],[6,3,6],[4,3,3,3,4],[3,3],[3,2,2,3],[3,9,3],[3,5,3],[4,3,4],[3,3],[2,2],[5]] # [list(list(int))]

    if check_puzzle(puzzlecolumns, puzzlerows): # [int]
        solve_puzzle(puzzlecolumns, puzzlerows) # []
    else:
        print "Puzzle is incorrect, sum of rows <> sum of columns" # [str]

bert()                                   # []

